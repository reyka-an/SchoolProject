@page "/teachers/add"
@using System.ComponentModel.DataAnnotations
@using MudBlazor
@using System.Net.Http.Json

@inject HttpClient Http
@inject NavigationManager Nav
@inject ISnackbar Snackbar

<PageTitle>Новый преподаватель</PageTitle>

<MudPaper Class="p-6 d-flex flex-column gap-6 mx-auto" MaxWidth="500px">
    <MudText Typo="Typo.h5">Добавить преподавателя</MudText>

    <MudForm @ref="form" Model="model" Validation="true" @bind-IsValid="isValid">
        <MudTextField @bind-Value="model.FullName" Label="ФИО" Required="true" Immediate="true" />

        <MudTextField @bind-Value="model.Email" Label="E‑mail" Required="true" Immediate="true"
                      Validation="@(new EmailAddressAttribute().IsValid)" />

        <MudTextField @bind-Value="model.PhoneNumber" Label="Телефон" Immediate="true" />

        <MudTextField @bind-Value="model.Password" Label="Пароль" InputType="InputType.Password"
                      Required="true" Immediate="true" />

        <div class="d-flex gap-4 mt-6">
            <MudButton Disabled="@(!isValid)" OnClick="CreateAsync" Color="Color.Primary" Variant="Variant.Filled">
                Создать
            </MudButton>
            <MudButton OnClick="@(() => Nav.NavigateTo("/teachers"))" Variant="Variant.Outlined">
                Отмена
            </MudButton>
        </div>
    </MudForm>
</MudPaper>

@code {
    private MudForm? form;
    private bool isValid;

    private readonly TeacherCreateVm model = new();

    private async Task CreateAsync()
    {
        await form!.Validate();
        if (!isValid) return;

        var user = new
        {
            fullName = model.FullName,
            email = model.Email,
            phoneNumber = model.PhoneNumber,
            passwordHash = model.Password,
            role = "Teacher"
        };

        var response = await Http.PostAsJsonAsync("/api/users", user);
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Преподаватель создан", Severity.Success);
            Nav.NavigateTo("/teachers", forceLoad: true);
        }
        else
        {
            var msg = await response.Content.ReadAsStringAsync();
            Snackbar.Add($"Ошибка ({response.StatusCode}): {msg}", Severity.Error);
        }
    }

    private class TeacherCreateVm
    {
        [Required]
        public string FullName { get; set; } = string.Empty;

        [Required, EmailAddress]
        public string Email { get; set; } = string.Empty;

        public string PhoneNumber { get; set; } = string.Empty;

        [Required]
        public string Password { get; set; } = string.Empty;
    }
}
