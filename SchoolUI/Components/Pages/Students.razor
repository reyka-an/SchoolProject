@page "/students"
@inject HttpClient Http
@inject NavigationManager Nav

<MudPaper Class="p-4">
    <div class="d-flex justify-space-between align-center mb-4">
        <MudText Typo="Typo.h5">Список учеников</MudText>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@(() => Nav.NavigateTo("/students/add"))">
            Добавить ученика
        </MudButton>
    </div>



    <MudSwitch T="bool" @bind-Checked="showHidden" Color="Color.Primary" Class="mb-2">Показать скрытых</MudSwitch>

    <MudTable Items="students" Hover="true">
        <HeaderContent>
            <MudTh>ФИО</MudTh>
            <MudTh>Email</MudTh>
            <MudTh>Телефон</MudTh>
            <MudTh>Группы</MudTh>
            <MudTh>Пробное</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTr Style="@(context.IsHidden ? "opacity: 0.5" : null)">
                <MudTd>@context.FullName</MudTd>
                <MudTd>@context.Email</MudTd>
                <MudTd>@context.PhoneNumber</MudTd>
                <MudTd>
                    @foreach (var group in context.Groups)
                    {
                        <MudChip T="string" Class="me-1">@group</MudChip>
                    }
                </MudTd>
                <MudTd>@(context.HadTrial ? "Да" : "Нет")</MudTd>
                <MudTd Align="Align.Right">
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert"
                             AriaLabel="Open user menu">
                        <MudMenuItem OnClick="@(() => Nav.NavigateTo($"/students/edit/{context.Id}"))" Label="Редактировать"/>
                        <MudMenuItem OnClick="() => ToggleHidden(context)" Label="Скрыть"/>
                        <MudMenuItem Label="Удалить"/>
                    </MudMenu>
                </MudTd>
            </MudTr>
        </RowTemplate>
    </MudTable>
</MudPaper>

@code {
    private List<StudentDto> students = new();
    private bool showHidden = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadStudents();
    }

    private async Task LoadStudents()
    {
        var response = await Http.GetFromJsonAsync<List<StudentDto>>($"/api/students?showHidden={showHidden.ToString().ToLower()}");
        if (response != null)
            students = response;
    }

    private async Task ToggleHidden(StudentDto student)
    {
        student.IsHidden = !student.IsHidden;
        var result = await Http.PutAsJsonAsync($"/api/students/{student.Id}", student);
        if (result.IsSuccessStatusCode)
            await LoadStudents();
    }

    private async Task OnSwitchChanged(bool value)
    {
        showHidden = value;
        await LoadStudents();
    }

    public class StudentDto
    {
        public int Id { get; set; }
        public string FullName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string PhoneNumber { get; set; } = string.Empty;
        public bool HadTrial { get; set; }
        public bool IsHidden { get; set; }
        public DateTime CreatedAt { get; set; }
        public IEnumerable<string> Groups { get; set; } = new List<string>();
    }
}
